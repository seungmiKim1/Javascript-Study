※  본 글은 https://javascript.info/intro 에서 내용을 brandydev가 직접 번역하여 개인적으로 공부하는 포스팅 입니다. 

혹시 잘못된 부분이 있거나, 피드백이 있으시다면 댓글 부탁드립니다 :) 

자바스크립트 개요 
자바스크립트라는 프로그래밍 언어에 대하여 어떤 내용이 특별한지, 우리가 무엇을 이뤄낼 수 있는지, 다른 기술과 어떻게 잘 놀 수(결합할 수)있는지에 대해 알아봅시다. 

 

자바스크립트란 무엇인가요? 
자바스크립트는 처음에 "웹 페이지를 살아있게 만든다"를 위해 만들어졌습니다. 

이 언어의 프로그램들은 "스크립트"라고 부릅니다. 스크립트 태그는 HTML 태그에 바로 쓸 수 있고, 자동적으로 페이지 로드가 됩니다. 

 

스크립트는 일반 텍스트로 제공되고 실행됩니다. 스크립트는 실행하기 위해 특별한 준비나 컴파일이 필요 없습니다. 

 

이러한 점에서, 자바스크립트는 자바라고 불리는 언어와는 매우 다릅니다. 

 

왜 자바스크립트라고 불릴까요? 
자바스크립트가 만들어졌을 때,처음에는  'LiveScript'라는 다른 이름을 가지고 있었습니다. 

그러나 그때 당시에는 자바가 매우 인기가 많았기 때문에, 자바를 도울 수 있는 '어린 동생'과 같은 새로운 이름을 사용하기로 결정하였습니다. 

 

그러나 자바스크립트가 점점 진화되면서, 자바스크립트는 ECMAScript라고 불리는 언어에서 독립하였으며, 자바와는 아무런 연관이 없습니다. 

(ECMAScript(ES)는 표준화된 스크립트 프로그래밍 언어이며, 자바스크립트를 표준화하기 위해 만들어졌다) 

ECMA International은 정보 통신에 대한 표준을 제정하는 비영리 표준화 기구이다. 

이곳에서 CD ROM의 볼륨과 파일 구조, C# 언어 규격, JSON 포맷처럼 일부 정보 통신 기술에 대한 표준을 이 단체에서 관리하고 있다. 자바스크립트도 ECMAScript 사양을 준수하는 범용 스크립팅 언어이다. 

ECMAScript도 JS 기반이며, JS역시 ECMAScript를 기반으로 한다. 

 

오늘날, 자바스크립트는 브라우저, 서버, 자바스크립트 엔진이라 불리는 특별한 프로그램을 가지고 있는 어느 장치에서나 실행될 수 있다. 

브라우저는 때때로 '자바스크립트 가상 머신'이라고 불리는 엔진을 장착하기도 한다. 

각각의 엔진은 다른 코드네임을 가지고 있다. 예를 들면, 

V8 - 크롬, 오페라,엣지 

SpiderMonkey - 파이어폭스 

IE에서 사용하는 Chakra와 같은 다른 코드네임, '자바스크립트 코어','니트로',사파리에서 쓰이는 'SquirrelFish' 등등이다. 

 

위에 있는 용어들은 기억하기 쉽다. 왜나하면 인터넷에서 개발 기사들에 사용되는 용어들이기 때문이다. 

(그나저나 거미원숭이와 다람쥐물고기라니.. 잊어버릴 수가 없을 것 같다) 우리도 사용할 용어들이다. 예를 들어, 

만약 "기능 X는 V8 엔진에서 지원합니다' 하면 그때 아마 크롬이나 오페라, 엣지에서 작동할 것이다. 

 

엔진은 무슨 일을 하나요? 
엔진은 복잡하지만, 개념은 쉽습니다. 

1. 엔진(브라우저에 내장된)은 스크립트를 읽습니다(해석합니다) 

2. 엔진은 스크립트를 기계어로 변환(컴파일)합니다.

3. 그리고 기계가 코드를 꽤 빠르게 실행합니다. (기계는 컴퓨터가 되겠죠?) 

 

엔진은 프로세스의 각 단계에서 최적화를 적용한다. 컴파일된 스크립트가 실행되는 동안에도 엔진이 작동하고, 

엔진의 흐름에 관한 데이터를 분석하고, 기계어를 더욱 최적화한다. 

 

브라우저에서 자바스크립트는 어떤 일을 할 수 있나요? 
모던 자바스크립트는 "안전한" 프로그래밍 언어입니다. 메모리나 CPU에 대한 낮은 수준의 접근을 제공하지 않습니다. 

 

자바스크립트의 능력은 작동하고 있는 환경에 완전히 의존합니다. 예를 들면, Node.js에서는 자바스크립트가 임의 파일(arbitrary file : 정확한 의미 파악 못함)를 읽/쓰기, 네트워크 요청 수행을 가능하도록 했습니다. 

 

브라우저에서의 자바스크립트는 웹페이지 조작, 유저/웹서버와 상호작용하는 것과 연관된 모든 것들을 할 수 있습니다. 

 

예를 들어, 브라우저에서의 자바스크립트가 할 수 있는 일들은 

- 페이지에 새로운 HTML 추가, 기존의 내용 바꾸기, 스타일 수정 

- 유저의 행동에 반응, 마우스 클릭 실행, 포인터 움직임, 키 누르기 

- 네트워크를 통해 원격 서버로 요청 보내기, 다운로드하고 파일 업로드하기 (AJAX와 COMET 기술이라고 불린다) 

- 쿠키 얻기/설정하기, 웹페이지 방문객에게 질문하기, 메시지 보여주기 

- 클라이언트 쪽의 데이터 기억하기(로컬 스토리지) 

 

자바스크립트가 할 수 없는 일은 무엇인가요? 

브라우저에서 자바스크립트의 역할은 유저의 안전을 보호하기 위해 제한되어 있습니다. 

개인 정보에 접근하거나 유저의 데이터를 해치는 악성 페이지로부터 보호하기 위한 것이 목표입니다. 

 

- 웹페이지에서의 자바스크립트는 하드디스크의 임의파일을 읽거나 쓸 수 없고, 복사하거나 프로그램을 실행할 수 없습니다. OS(운영체제)기능에 직접 접근할 수 없습니다. 

모던 브라우저들은 파일과 함께 작업하는 것을 허용하지만, 사용자가 브라우저 창에 파일을 "드롭"하거나 <input> 태그를 통해 파일을 선택하는 것과 같은 특정 작업을 수행하는 경우에만 접근이 허용되고, 나머지 액션들에 대해서는 접근이 제한적이다. 

언제나 카메라/마이크와 다른 장치들과 상호작용하지만, 유저의 정확한 허가를 필요로 한다. 

그래서 자바스크립트가 사용 가능한 페이지에서는 웹 카메라를 몰래 활성화하고, 주변을 관찰하고, 정보를 NSA로 보내지 않을 수 있습니다. 

(NSA : 미국 국가안보국 National Security Agency) 

 

- 다른 탭이나 윈도우 창은 일반적으로 서로 알지 못합니다. 때때로 서로 압니다. 예를 들면, 윈도우 하나의 창이 다른 창을 열기 위해 JS를 사용하는 경우에는 그렇게 합니다. 그러나 이러한 경우에는, 한 페이지의 자바스크립트는 다른 사이트에서 온 다른 페이지에 접근하지 못합니다(다른 도메인, 포트, 프로토콜) 

이것은 "Same Origin Policy" - 동일 출처 정책 (웹 보안) : 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용 하는 것을 제한하는 보안 방식. 잠재적으로 해로울 수 있는 문서를 분리함으로써 공격받을 수 있는 경로를 줄여준다. 

양쪽의 페이지는 데이터 교환에 무조건 동의해야 하고 그것을 다룰 수 있는 특별한 자바스크립트 코드를 반드시 포함해야 합니다. 우리는 튜토리얼에서 다룰 것입니다. 

 

다시 이러한 제한들은 유저의 안전성 때문입니다. 유저가 열어본 http://anysite.com 이라는 페이지는 예를 들어 http://gmail.com 이라는 URL을 가진 다른 브라우저 탭에 액세스 할 수 없고 거기서 정보를 도용할 수 없어야 합니다. 

- 자바스크립트는 인터넷 브라우저(웹 브라우저)를 통해 현재 페이지가 있는 서버와 쉽게 통신할 수 있습니다. 그러나 다른 사이트나 도메인에서 데이터를 받기 위한 것은 안됩니다.  가능하긴 하지만, 원격 측에서 명시적인 동의(HTTP 헤더로 표현)가 필요합니다. 그러나 이것은 안전상의 한계입니다. 

 


출처 :&nbsp;https://ko.javascript.info/intro
그러한 제한들은 자바스크립트가 서버와 같은 곳인 브라우저 밖에서 사용된다면 존재하지 않을 것입니다. 

모던 브라우저는 확장된 허가가 된 플러그인이나 익스텐션도 허락합니다. 

 

무엇이 자바스크립트를 특별하게 만드나요? 

- HTML/CSS의 완전한 통합 

- 간단한 것들은 간단하게 처리

- 모든 주요한 브라우저에 지원되고 기본적으로 활성화 

 

자바스크립트는 세 가지의 것들을 결합하는 유일한 브라우저 기술입니다. 

그것이 자바스크립트를 특별하게 만들죠. 이것이 왜 브라우저 인터페이스를 만드는데 가장 널리 쓰이는 도구인지에 대한 이유입니다. 

자바스크립트는 서버,모바일 애플리케이션 등을 만드는데 쓰일 수 있습니다. 

 
자바스크립트 언어 "넘어" 
자바스크립트의 문법은 모두의 필요에 맞지는 않습니다. 다른 사람들은 다른 특징들을 원합니다. 

프로젝트와 요구 사항이 사람마다 다르기 때문에 예상할 수 있는 일입니다. 

그래서, 최근 브라우저에서 실행되기 전에 자바스크립트로 변환되는 수많은 언어들이 과잉 등장했습니다.

 

모던 툴들은 트랜스파일화를 아주 투명하게 만들고, 개발자들이 다른 언어로 코딩하고 "후드 아래" 자동 변환하도록 허용합니다. 

 

그러한 언어들의 예시 
: CoffeeScript : 자바스크립트에서 구문론적인 설탕(달달ㅎ). 짧은 문법을 도입하고, 명백하고 간결한 코드를 쓸 수 있도록 합니다. Ruby 개발이 그렇습니다. 

- TypeScript : "엄격한 데이터 타이핑"에 집중하여 개발을 심플하게 하고, 복잡한 시스템을 지원합니다. 마이크로소프트에서 만들었습니다. 

- Flow : 다른 방법으로 데이터 타이핑을 추가합니다. 페이스북에서 만들었습니다.

- Dart : 독립적인 언어로, 모바일 앱과 같은 논브라우저 환경에서 자신만의 엔진을 가지고 있을 뿐만 아니라 자바스크립트로 트랜스파일도 됩니다. 구글에서 만들었습니다. 

- Brython : 파이썬을 자바스크립트로 트랜스파일하고 자바스크립트 없이 순수 파이썬 애플리케이션 작성이 가능합니다. 

- Kotlin : 모던, 간결하고 안전한 프로그래밍 언어이고 브라우저나 노드를 타겟으로 할 수 있습니다. 

 

이외에도 많습니다. 물론 우리가 이러한 언어들 중 하나를 사용하더라도, 우리가 무엇을 하고 있는지 진정으로 이해하기 위해서는 자바스크립트도 알아야 합니다. 

 

요약 
- 자바스크립트는 처음에 브라우저만을 위한 언어로 만들어졌으며, 지금은 다른 환경에서도 잘 쓰입니다. 

- 오늘날, 자바스크립트는 완전히 HTML과 CSS를 통합한 널리 쓰이는 브라우저 언어로 가장 널리 쓰이고 있는 특별한 포지션을 가지고 있습니다. 

= 자바스크립트로 트랜스파일 되는 많은 언어들이 있고 특별한 특징을 제공합니다. 그들을 보는 것을 추천하고, 최소한 간결하게라도 자바스크립트를 마스터 한 뒤에. 

 

참고 자료 
https://javascript.info/intro

 

 

몰랐던 단어 
* plethora 과다,과잉 (=excess) 

* transpilation 증산(?) 

* transparent 투명한 

* crippled 불구의,무능력한 

 

 
번역 후기 
자바스크립트의 다양한 역사들에 대해서 알게 되었다. LiveScript라는 이름을 가지고 있다가 Java가 흥행세여서 Java 동생이라는 타겟으로.. 나왔다가 지금은 또 독자적인 길을 걷고 있는 자바스크립트. 묘하게 매력 있는 녀석이다.

근데 아직 자바스크립트를 쓰면서 위에 명시된 장점들에 대해서는 아직 깊게 다가오지는 못했다. 차차 자바스크립트를 열심히 공부하면서 자바스크립트만의 독특한 강점들에 대해서 느껴봐야겠다. 

 

그리고 NSA(미국 안보국), Single Origin Policy 같은 단어들에 대해서도 알게 되었다.

그러나 아직 transpiled나, aribitary file 같은 개념은 잘 와닿지 않는다. 나중에 개념이 정확해지면 추후에 업데이트 할 예정이다. 

 https://brandydev.tistory.com/manage/posts/

 
